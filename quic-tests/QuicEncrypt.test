%description:
Test of encryption and decryption.

%#--------------------------------------------------------------------------------------------------------------

%inifile: omnetpp.ini

[General]
network=Test
cmdenv-event-banners=false
cmdenv-express-mode = false
tkenv-plugin-path = ../../../etc/plugins

%#--------------------------------------------------------------------------------------------------------------

%includes:
#include "inet/transportlayer/quic/QUICConnection.h"
#include "inet/transportlayer/quic/QUICBasic.h"
#include "inet/transportlayer/quic/crypto/IQUICTLS.h"
#include "inet/transportlayer/quic/crypto/QUICPacketProtector.h"
#include "inet/transportlayer/quic/FrameListPacket.h"

%#--------------------------------------------------------------------------------------------------------------

%global:
using namespace inet;

%#--------------------------------------------------------------------------------------------------------------

%activity:
uint8_t CLIENT_HS_KEY[] = {0x3a, 0xd0, 0x54, 0x2c, 0x4a, 0x85, 0x84, 0x74, 0x00, 0x63, 0x04, 0x9e, 0x3b, 0x3c, 0xaa, 0xb2};
uint8_t CLIENT_HS_IV[] = {0xd1, 0xfd, 0x26, 0x05, 0x42, 0x75, 0x3a, 0xba, 0x38, 0x58, 0x9b, 0xad};
uint8_t SERVER_HS_KEY[] = {0xbe, 0xe4, 0xc2, 0x4d, 0x2a, 0xf1, 0x33, 0x80, 0xa9, 0xfa, 0x24, 0xa5, 0xe2, 0xba, 0x2c, 0xff};
uint8_t SERVER_HS_IV[] = {0x25, 0xb5, 0x8e, 0x24, 0x6d, 0x9e, 0x7d, 0x5f, 0xfe, 0x43, 0x23, 0xfe};
uint64_t CONN_ID = 0x8394c8f03e515708;

struct KeyMaterial clientPPKeyMaterial;
struct KeyMaterial serverPPKeyMaterial;

for (int i = 0; i < 12; i++) {
    clientPPKeyMaterial.iv[i] = CLIENT_HS_IV[i];
    serverPPKeyMaterial.iv[i] = SERVER_HS_IV[i];
}

for (int i = 0; i < 16; i++) {
    clientPPKeyMaterial.key[i] = CLIENT_HS_KEY[i];
    serverPPKeyMaterial.key[i] = SERVER_HS_KEY[i];
}

QUIC_Basic* quic = new QUIC_Basic();
QUICConnection* connection = new QUICConnection(quic, CONN_ID, 0);
connection->getPacketProtector()->setConnectionID(CONN_ID);
connection->getPacketProtector()->setClientPPKeyMaterial(clientPPKeyMaterial);
connection->getPacketProtector()->setServerPPKeyMaterial(serverPPKeyMaterial);
connection->getPacketProtector()->initialize(connection);

const char* PLAINTEXT = "ENCRYPTION_TEST\0";
FrameListPacket* packet = new FrameListPacket();
ByteArray frameByteArray;

frameByteArray.addDataFromBuffer(PLAINTEXT, 16);
packet->setFrameListArray(frameByteArray);

EV_INFO << "Plaintext before encryption: " << packet->getFrameListArray().getDataPtr() << endl;

// Client is encrypting; use SERVER_HS_IV as ad
connection->getPacketProtector()->setIsActive(true);
connection->getPacketProtector()->encryptPayload(packet, 1, SERVER_HS_IV, 12, true);

// UnicodeDecodeError occurs when encrypted bytes were printed out
//EV_INFO << "Encrypted plaintext" << packet->getFrameListArray().getDataPtr() << endl;

// Server is decrpyting; use SERVER_HS_IV as ad
connection->getPacketProtector()->setIsActive(false);
connection->getPacketProtector()->decryptPayload(packet, 1, SERVER_HS_IV, 12, true);

EV_INFO << "Decrypted plaintext: " << packet->getFrameListArray().getDataPtr() << endl;

// Clear
delete packet;
delete connection;
//delete quic;

%#--------------------------------------------------------------------------------------------------------------

%contains: stdout
Plaintext before encryption: ENCRYPTION_TEST
Decrypted plaintext: ENCRYPTION_TEST

%#--------------------------------------------------------------------------------------------------------------
